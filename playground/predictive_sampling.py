import flax.linen as nn
from brax.envs.base import PipelineEnv
from flax import struct


@struct.dataclass
class PredictiveSamplingOptions:
    """Hyperparameters for predictive sampling policy search.

    episode_length: The number of timesteps in each episode.
    planning_horizon: The number of timesteps to plan ahead.
    num_envs: The number of parallel environments to use.
    num_samples: The number of samples to take in each environment.
    """

    episode_length: int
    planning_horizon: int
    num_envs: int
    num_samples: int


class PredictiveSampling:
    """Policy learning based on predictive sampling.

    The basic idea is to learn a trajectory-optimizing policy

        u₀, u₁, ... = π(y₀; θ)

    by regressing on training data generated by predictive sampling
    (Howell et al., https://arxiv.org/abs/2212.00541).
    """

    def __init__(
        self,
        env: PipelineEnv,
        policy: nn.Module,
        options: PredictiveSamplingOptions,
        seed: int = 0,
    ):
        """Initialize the predictive sampling policy search algorithm.

        Args:
            env: The environment to train on.
            policy: A network module mapping observations to an action sequence.
            options: The hyperparameters for the algorithm.
            seed: The random seed to use for parameter initialization.
        """
        self.env = env
        self.policy = policy
        self.options = options
        self.seed = seed

        # TODO: check the policy has the correct output size
